<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 蓝梦轩</title>
    <link>https://hezhizhen.github.io/blog/tags/go/</link>
    <description>Recent content in Go on 蓝梦轩</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>© 夜阑听风</copyright>
    <lastBuildDate>Wed, 05 Jun 2019 22:16:36 +0800</lastBuildDate>
    <atom:link href="https://hezhizhen.github.io/blog/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Code Review Comments</title>
      <link>https://hezhizhen.github.io/blog/post/go-code-review-comments/</link>
      <pubDate>Wed, 05 Jun 2019 22:16:36 +0800</pubDate>
      <guid>https://hezhizhen.github.io/blog/post/go-code-review-comments/</guid>
      <description>&lt;p&gt;Go 写了这么久，却一直没有把 &lt;a href=&#34;https://github.com/golang/go/wiki/CodeReviewComments&#34;&gt;Go Code Review Comments&lt;/a&gt; 完整地看一遍。今天看了一篇 Go 的文章，里面提到了它，索性就仔细一读。&lt;/p&gt;&#xA;&lt;p&gt;一开头就声明，这只是一份常见错误的列表，而非综合的风格指南，亦可作为 &lt;a href=&#34;https://golang.org/doc/effective_go.html&#34;&gt;Effective Go&lt;/a&gt; 的一份补充。&lt;/p&gt;&#xA;&lt;h2 id=&#34;gofmt&#34;&gt;Gofmt&lt;/h2&gt;&#xA;&lt;p&gt;建议使用 &lt;code&gt;gofmt&lt;/code&gt; 来修复一些风格上的问题。像 vs code 之类的编辑器在安装 Go 的插件后，设置中会让你选择何时格式化代码，一般在保存时就够了。我使用的是 &lt;code&gt;goimports&lt;/code&gt;，它除了能胜任 &lt;code&gt;gofmt&lt;/code&gt; 的工作之外，还能自动添加和删除导入的包，并分类排序。&lt;/p&gt;&#xA;&lt;h2 id=&#34;comment-sentences&#34;&gt;Comment Sentences&lt;/h2&gt;&#xA;&lt;p&gt;注释应当是完整的句子，以被注释的对象名开始，以句号结束。&lt;/p&gt;&#xA;&lt;h2 id=&#34;contexts&#34;&gt;Contexts&lt;/h2&gt;&#xA;&lt;p&gt;Go 一般显式地在整个函数调用链中传递 Contexts，并作为第一个参数。除此之外，不要在结构体（struct）中添加 Context 类型的元素，而是给该结构体的每一个方法添加 &lt;code&gt;ctx&lt;/code&gt; 参数。&lt;/p&gt;&#xA;&lt;h2 id=&#34;copying&#34;&gt;Copying&lt;/h2&gt;&#xA;&lt;p&gt;从其他包中复制结构体的时候，要小心避免预期外的别名。如果某个类型的方法其 receiver 为该类型的指针，就不要复制该类型的值。&lt;/p&gt;&#xA;&lt;h2 id=&#34;declaring-empty-slices&#34;&gt;Declaring Empty Slices&lt;/h2&gt;&#xA;&lt;p&gt;声明空的 slice 时，更推荐使用 &lt;code&gt;var&lt;/code&gt; 而非 &lt;code&gt;:=&lt;/code&gt; 的方式，例子如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// prefer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// not prefer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两种方式得到的 slice 功能相同，有相同的长度和容量，并且都为0，区别在于：第一种方式得到的是 nil slice，而第二种方式得到的是长度为0的非 nil slice。nil slice 是更推荐的风格。这个问题之前叶古和我说过几次，说不要写第二种方式这样的代码，会让人觉得 Go 没学好。&lt;/p&gt;&#xA;&lt;h2 id=&#34;crypto-rand&#34;&gt;Crypto Rand&lt;/h2&gt;&#xA;&lt;p&gt;不要用 &lt;code&gt;math/rand&lt;/code&gt; 这个包来生成 keys，即使是用完就丢的那种，因为 unseeded 会使得生成器完全可预测。应该使用 &lt;code&gt;crypto/rand&lt;/code&gt; 这个包。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
